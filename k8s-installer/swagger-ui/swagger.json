{
  "swagger": "2.0",
  "info": {
    "description": "api server OpenAPI",
    "title": "api server",
    "contact": {
      "name": "api server",
      "url": "http://localhost:8080",
      "email": "example@example.com"
    },
    "license": {
      "name": "Apache",
      "url": "http://www.apache.org/licenses/"
    },
    "version": "1.0.0",
    "x-taggroups": [
      {
        "name": "Resources"
      }
    ]
  },
  "paths": {
    "/api/addons/v1/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List Addons",
        "operationId": "ListClusterAddons",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Addons"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List Addons",
        "operationId": "ManageClusterAddons",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.Addons"
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Addons"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/authtype": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "System"
        ],
        "summary": "Get Core_Authentication_Type",
        "operationId": "GetAuthType",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SystemAuthType"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List cluster info",
        "operationId": "ListCluster",
        "parameters": [
          {
            "type": "string",
            "default": "not-set",
            "description": "region id",
            "name": "region_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create cluster",
        "operationId": "CreateCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/add_node/{cluster-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "add node to cluster",
        "operationId": "AddNodeToCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.ClusterNode"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "400": {
            "description": "Unable to add node to cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Unable to add node to cluster due to pre-check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/backup/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster List Backup",
        "operationId": "BackUpList",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.BackupList"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Create Backup",
        "operationId": "BackUpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.Backup"
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/backup/{cluster-id}/{backup-name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Delete Backup",
        "operationId": "BackUpDelete",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "backup name",
            "name": "backup-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/backupregular/{cluster-id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Create Regular Backup",
        "operationId": "BackupRegularCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.BackupRegular"
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.BackupRegular"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/backupregular/{cluster-id}/{backup-regular-name}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Get Regular Backup",
        "operationId": "BackupRegularGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "backupregular name",
            "name": "backup-regular-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Delete Regular Backup",
        "operationId": "BackupRegularDelete",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "backupregular name",
            "name": "backup-regular-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/gracefully_delete/{cluster-id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete cluster by gracefully",
        "operationId": "DeleteCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "412": {
            "description": "Not allowed to delete cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/ks/host": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List all ks host cluster",
        "operationId": "ListKsHostCluster",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/list_cluster_nodes/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "list cluster nodes",
        "operationId": "ListClusterNodes",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "400": {
            "description": "Unable to list node with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/mock/{cluster-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mock_Cluster"
        ],
        "summary": "mock a cluster",
        "operationId": "MockOrUnMockCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/recreate/{cluster-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Re-create cluster",
        "operationId": "ReCreateCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/remove_node/db_only/{cluster-id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "force remove node from cluster in database without touch actual k8s installer",
        "operationId": "RemoveNodeFromClusterDBOnly",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.ClusterNode"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "400": {
            "description": "Unable to remove node from cluster with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Unable to add node to cluster due to pre-check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/remove_node/{cluster-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "remove node from cluster",
        "operationId": "RemoveNodeFromCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.ClusterNode"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "400": {
            "description": "Unable to remove node from cluster with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Unable to add node to cluster due to pre-check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/restore/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster List Restore",
        "operationId": "RestoreList",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.RestoreList"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/restore/{cluster-id}/{backup-name}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Create Backup",
        "operationId": "RestoreCreate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "restore cluster from backup file name",
            "name": "backup-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/restore/{cluster-id}/{restore-name}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Backup_Restore"
        ],
        "summary": "Cluster Delete Restore",
        "operationId": "RestoreDelete",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "restore name",
            "name": "restore-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/status/running": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List all running cluster",
        "operationId": "ListRunningCluster",
        "parameters": [
          {
            "type": "string",
            "default": "not-set",
            "description": "region id",
            "name": "region_id",
            "in": "query"
          },
          {
            "type": "string",
            "default": "kubeadm",
            "description": "cluster installer",
            "name": "cluster_installer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/template": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "get cluster template",
        "operationId": "GetTemplate",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "Unable to list node with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "create cluster template",
        "operationId": "CreateTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.ClusterTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/schema.ClusterTemplate"
            }
          },
          "400": {
            "description": "Unable to list node with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/unmock/{cluster-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mock_Cluster"
        ],
        "summary": "mock a cluster",
        "operationId": "MockOrUnMockCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/cluster/v1/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get cluster info",
        "operationId": "GetClusterInfo",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "Unable to find cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete cluster by given cluster id",
        "operationId": "DeleteCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "412": {
            "description": "Not allowed to delete cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "List cluster info",
        "operationId": "ListCluster",
        "parameters": [
          {
            "type": "string",
            "default": "not-set",
            "description": "region id",
            "name": "region_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "Create cluster",
        "operationId": "CreateCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/running": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "List all running cluster",
        "operationId": "ListRunningCluster",
        "parameters": [
          {
            "type": "string",
            "default": "not-set",
            "description": "region id",
            "name": "region_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/template": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "get cluster template",
        "operationId": "GetTemplate",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "Unable to list node with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "create cluster template",
        "operationId": "CreateTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.ClusterTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/schema.ClusterTemplate"
            }
          },
          "400": {
            "description": "Unable to list node with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "Get cluster info",
        "operationId": "GetClusterInfo",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "Unable to find cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "Delete cluster by given cluster id",
        "operationId": "DeleteClusterV2",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          },
          {
            "type": "bool",
            "default": false,
            "description": "gracefully_delete delete namespace",
            "name": "gracefully_delete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "412": {
            "description": "Not allowed to delete cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/{cluster-id}/addons": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "List Addons",
        "operationId": "ListClusterAddons",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Addons"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "List Addons",
        "operationId": "ManageClusterAddons",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.Addons"
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Addons"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/{cluster-id}/nodes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "list cluster nodes",
        "operationId": "ListClusterNodes",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "400": {
            "description": "Unable to list node with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "add node to cluster",
        "operationId": "AddNodeToCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.ClusterNode"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Cluster"
              }
            }
          },
          "400": {
            "description": "Unable to add node to cluster",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Unable to add node to cluster due to pre-check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "remove node from cluster",
        "operationId": "RemoveNodeFromCluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.ClusterNode"
              }
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {},
          "400": {
            "description": "Unable to remove node from cluster with given cluster id",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Unable to add node to cluster due to pre-check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/{cluster-id}/recreate": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "Re-create cluster",
        "operationId": "ReCreateCluster",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/{cluster-id}/update-cluster-installer": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "update cluster installer",
        "operationId": "UpdateClusterInstaller",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20ClusterInstaller%20string%20%22json:%5C%22cluster_installer%5C%22%22%20%7D"
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/clusters/{cluster-id}/update-status": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Clusters"
        ],
        "summary": "update cluster status",
        "operationId": "UpdateClusterStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Status%20string%20%22json:%5C%22status%5C%22%22%20%7D"
            }
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Cluster"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/domain/sub-domain": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "List all sub domain and it's resolve",
        "operationId": "ListAllSubDomain",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coredns.DNSDomain"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/domain/top-level-domain": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "List top level domain",
        "operationId": "ListTopLevelDomains",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coredns.TopLevelDomain"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "create top level domain",
        "operationId": "CreateTopLevelDomain",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Domain%20string%20%22json:%5C%22domain%5C%22%20validate:%5C%22required,fqdn%5C%22%20description:%5C%22domain%20name%20unique%5C%22%22;%20Description%20string%20%22json:%5C%22description,omitempty%5C%22%22%20%7D"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/coredns.TopLevelDomain"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/domain/top-level-domain/{domain}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "Get top level domain detail",
        "operationId": "GetTopLevelDomain",
        "parameters": [
          {
            "type": "string",
            "description": "domain name",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/coredns.TopLevelDomain"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "update dns domain",
        "operationId": "UpdateTopLevelDomain",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Description%20string%20%22json:%5C%22description,omitempty%5C%22%22%20%7D"
            }
          },
          {
            "type": "string",
            "description": "domain name",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Description%20string%20%22json:%5C%22description,omitempty%5C%22%22%20%7D"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "Delete top level domain",
        "operationId": "DeleteTopLevelDomain",
        "parameters": [
          {
            "type": "string",
            "description": "domain name",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Check Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/domain/{domain}/sub-domain": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "List all sub domain and it's resolve",
        "operationId": "ListSubDomainOfTLd",
        "parameters": [
          {
            "type": "string",
            "description": "top domain name",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coredns.DNSDomain"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "Create sub domain and it's resolve of a top level domain",
        "operationId": "CreateSubDomain",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coredns.DNSDomainUpdateDocSchema"
            }
          },
          {
            "type": "string",
            "description": "top level domain name",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coredns.DNSDomain"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/domain/{tld-domain}/sub-domain/{domain}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Dns"
        ],
        "summary": "Update sub domain",
        "operationId": "UpdateSubDomain",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20DomainResolve%20%7C%7Ccoredns.DNSDomainUpdateDocSchema%20%22json:%5C%22domain_resolve%5C%22%20%20validate:%5C%22required%5C%22%20description:%5C%22ip%20address%20list%20of%20this%20domain%20resolve%20to%5C%22%22;%20Description%20string%20%22json:%5C%22description,omitempty%5C%22%22%20%7D"
            }
          },
          {
            "type": "string",
            "description": "top level domain name",
            "name": "tld-domain",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "domain name",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/coredns.DNSDomain"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/kubectl-exec": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_KubectlExec"
        ],
        "summary": "Run kubectl exec",
        "operationId": "KubectlExec",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.KubectlExec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.KubectlExecResult"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/licenses": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_License"
        ],
        "summary": "Get License",
        "operationId": "GetLicense",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SystemInfo"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_License"
        ],
        "summary": "Create or Update License",
        "operationId": "CreateLicense",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.LicenseInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SystemInfo"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/licenses/addons": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_License"
        ],
        "summary": "Get addons from license",
        "operationId": "GetAddonsFromLicense",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SystemInfo"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Authentication"
        ],
        "summary": "Login",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Token%20string%20%22json:%5C%22token%5C%22%22;%20ExpiredDate%20string%20%22json:%5C%22expired_date%5C%22%22;%20Permission%20uint64%20%22json:%5C%22permission%5C%22%22;%20User%20schema.User%20%22json:%5C%22user%5C%22%22%20%7D"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/nodes": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "List Node Info",
        "operationId": "ListNode",
        "parameters": [
          {
            "type": "string",
            "default": "not-set",
            "description": "region id",
            "name": "region_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.NodeInformation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/nodes/usable": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "List Node That Can Be Installed With Cluster",
        "operationId": "ListUsableNode",
        "parameters": [
          {
            "type": "int",
            "default": 0,
            "description": "page index",
            "name": "page_index",
            "in": "query",
            "required": true
          },
          {
            "type": "int",
            "default": 0,
            "description": "page size",
            "name": "page_size",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "not-set",
            "description": "region id",
            "name": "region_id",
            "in": "query"
          },
          {
            "type": "string",
            "default": "kubeadm",
            "description": "cluster installer",
            "name": "cluster_installer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.NodeInformation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/nodes/{node-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "Get Node Info",
        "operationId": "GetNode",
        "parameters": [
          {
            "type": "string",
            "description": "node id",
            "name": "node-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.NodeInformation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "Delete node from db",
        "operationId": "DeleteNode",
        "parameters": [
          {
            "type": "string",
            "description": "node id",
            "name": "node-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.NodeInformation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/nodes/{node-id}/disable": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "disable node from db",
        "operationId": "DisableNode",
        "parameters": [
          {
            "type": "string",
            "description": "node id",
            "name": "node-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.NodeInformation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/nodes/{node-id}/enable": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "Enable node from db",
        "operationId": "EnableNode",
        "parameters": [
          {
            "type": "string",
            "description": "node id",
            "name": "node-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.NodeInformation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/nodes/{node-id}/update-role": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "disable node from db",
        "operationId": "UpdateNodeRole",
        "parameters": [
          {
            "type": "string",
            "description": "node id",
            "name": "node-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.NodeInformation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/operation/upgrade/{upgrade-plan-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Operation"
        ],
        "summary": "List operation with upgrade id",
        "operationId": "ListOperationWithUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "upgrade-plan-id",
            "name": "upgrade-plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Operation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/operation/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Operation"
        ],
        "summary": "List cluster operation",
        "operationId": "ListOperation",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Operation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/operation/{operation-id}/continue": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Operation"
        ],
        "summary": "List cluster operation",
        "operationId": "ContinueOperation",
        "parameters": [
          {
            "type": "string",
            "description": "operation id",
            "name": "operation-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Operation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/regions": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Region"
        ],
        "summary": "List Region Info",
        "operationId": "ListRegions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Region"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/regions/{region}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Region"
        ],
        "summary": "Get Region info",
        "operationId": "GetRegion",
        "parameters": [
          {
            "type": "string",
            "description": "region id",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Region"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Region"
        ],
        "summary": "Delete region by given region id",
        "operationId": "DeleteRegion",
        "parameters": [
          {
            "type": "string",
            "description": "region id",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "412": {
            "description": "Not allowed to delete region",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/roles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Role"
        ],
        "summary": "List Role Info",
        "operationId": "ListRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Role"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Role"
        ],
        "summary": "Create Role",
        "operationId": "CreateOrUpdateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Name%20string%20%22json:%5C%22name%5C%22%20validate:%5C%22required%5C%22%22;%20Function%20uint64%20%22json:%5C%22function%5C%22%20validate:%5C%22required%5C%22%20description:%5C%22function%20code%20represent%20capability%20of%20the%20role%5C%22%22%20%7D"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/roles/{role-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Role"
        ],
        "summary": "Get Role Info",
        "operationId": "GetRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Role"
        ],
        "summary": "Update Role Info",
        "operationId": "CreateOrUpdateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Role"
        ],
        "summary": "Delete Role",
        "operationId": "DeleteRole",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/send-message": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Authentication"
        ],
        "summary": "SendMesssageCode",
        "operationId": "SendMesssageCode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          {
            "type": "string",
            "description": "message code type, installer=103, ks=103",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SendMesssageResp"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/ssh": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "Connector node with ssh protocol",
        "operationId": "NodeSSH",
        "parameters": [
          {
            "type": "string",
            "description": "auth token",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "int",
            "default": 150,
            "description": "terminal cols",
            "name": "cols",
            "in": "query",
            "required": true
          },
          {
            "type": "int",
            "default": 35,
            "description": "terminal rows",
            "name": "rows",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "node ip,username,password,port,use base64 encode",
            "name": "msg",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.NodeInformation"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/ssh/rsakey": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Node"
        ],
        "summary": "Get rsa public key",
        "operationId": "GetSSHRSAKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SSHRSAkey"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/text-code-validation": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Authentication"
        ],
        "summary": "ValidateMesssageCode",
        "operationId": "ValidateMesssageCode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.ValidateMesssageCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.ValidateMesssageResp"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/upgrades/plans": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "List specified cluster upgrade plan",
        "operationId": "ListUpgradePlaneV2",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradePlan"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "Make a upgrade plan for specified cluster",
        "operationId": "MakeUpgradePlanV2",
        "parameters": [
          {
            "type": "string",
            "description": "version name",
            "name": "version-name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradePlan"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/upgrades/plans/{plan-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "show detail about an upgrade plan",
        "operationId": "UpgradePlanDetail",
        "parameters": [
          {
            "type": "string",
            "description": "plan id",
            "name": "plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "apply the plan do upgrade to cluster",
        "operationId": "ApplyUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "plan id",
            "name": "plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "Delete an upgrade plan",
        "operationId": "DeleteUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "plan id",
            "name": "plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/upgrades/version": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "List available upgrade version",
        "operationId": "ListUpgradableVersion",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.UpgradableVersion"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "Create upgrade version",
        "operationId": "CreateUpgradableVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/upgrades/version/{version-name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "update upgrade version",
        "operationId": "UpdateUpgradableVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          {
            "type": "string",
            "description": "version name",
            "name": "version-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_Upgrade"
        ],
        "summary": "Delete upgrade version",
        "operationId": "DeleteUpgradableVersion",
        "parameters": [
          {
            "type": "string",
            "description": "version name",
            "name": "version-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/users": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_User"
        ],
        "summary": "List User Info",
        "operationId": "ListUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.User"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_User"
        ],
        "summary": "Create User",
        "operationId": "CreateOrUpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Username%20string%20%22json:%5C%22username%5C%22%20validate:%5C%22required%5C%22%22;%20Password%20string%20%22json:%5C%22password%5C%22%20validate:%5C%22required%5C%22%22;%20Roles%20%7C%7Cschema.Role%20%22json:%5C%22roles,omitempty%5C%22%20description:%5C%22contain%20one%20or%20more%20roles%5C%22%22;%20Phone%20string%20%22json:%5C%22phone,omitempty%5C%22%20description:%5C%22user%20phone%20number%5C%22%22;%20KsAccount%20string%20%22json:%5C%22ks_account,omitempty%5C%22%20description:%5C%22kubespere%20user%20account%5C%22%22%20%7D"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/users/{username}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_User"
        ],
        "summary": "Get User Info",
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_User"
        ],
        "summary": "Update User Info",
        "operationId": "CreateOrUpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22;%20Username%20string%20%22json:%5C%22username,omitempty%5C%22%22;%20Password%20string%20%22json:%5C%22password,omitempty%5C%22%22;%20Roles%20%7C%7Cstruct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22%20%7D%20%22json:%5C%22roles,omitempty%5C%22%20description:%5C%22contain%20one%20or%20more%20roles%5C%22%22;%20Phone%20string%20%22json:%5C%22phone,omitempty%5C%22%20description:%5C%22user%20phone%20number%5C%22%22;%20KsAccount%20string%20%22json:%5C%22ks_account,omitempty%5C%22%20description:%5C%22kubespere%20user%20account%5C%22%22%20%7D"
            }
          },
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_User"
        ],
        "summary": "Delete User",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/core/v1/users/{username}/globalroles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Core_User"
        ],
        "summary": "Get User Global Rules Info, only used in caas auth type",
        "operationId": "GetUserGlobalRules",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.CaaSGlobalRoles"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/license/v1": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get License",
        "operationId": "GetLicense",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SystemInfo"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create or Update License",
        "operationId": "CreateLicense",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.LicenseInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.SystemInfo"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/license/v1/addons": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get addons from license",
        "operationId": "GetAddonsFromLicense",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Console%20int%20%22json:%5C%22console%5C%22%20description:%5C%22Is%20console%20enabled%200=disable%201=enabled%5C%22%22;%20MiddlePlatform%20int%20%22json:%5C%22middle_platform%5C%22%20description:%5C%22Is%20middle%20platform%20enabled%200=disable%201=enabled%5C%22%22;%20Pgo%20int%20%22json:%5C%22pgo%5C%22%20description:%5C%22Is%20middle%20platform%20enabled%200=disable%201=enabled%5C%22%22%20%7D"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/operation/v1/continue/{operation-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List cluster operation",
        "operationId": "ContinueOperation",
        "parameters": [
          {
            "type": "string",
            "description": "operation id",
            "name": "operation-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Operation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/operation/v1/upgrade/{upgrade-plan-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List operation with upgrade id",
        "operationId": "ListOperationWithUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "upgrade-plan-id",
            "name": "upgrade-plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Operation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/operation/v1/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List cluster operation",
        "operationId": "ListOperation",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Operation"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/role/v1": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create Role",
        "operationId": "CreateOrUpdateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Name%20string%20%22json:%5C%22name%5C%22%20validate:%5C%22required%5C%22%22;%20Function%20uint64%20%22json:%5C%22function%5C%22%20validate:%5C%22required%5C%22%20description:%5C%22function%20code%20represent%20capability%20of%20the%20role%5C%22%22%20%7D"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/role/v1/roles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List Role Info",
        "operationId": "ListRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Role"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/role/v1/roles_list": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Roles for user creation,ensure user can be created when no role management permission is grant",
        "operationId": "ListRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.Role"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/role/v1/{role-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Role Info",
        "operationId": "GetRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update Role Info",
        "operationId": "CreateOrUpdateRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Name%20string%20%22json:%5C%22name%5C%22%20validate:%5C%22required%5C%22%22;%20Function%20uint64%20%22json:%5C%22function%5C%22%20validate:%5C%22required%5C%22%20description:%5C%22function%20code%20represent%20capability%20of%20the%20role%5C%22%22%20%7D"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.Role"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete Role",
        "operationId": "DeleteRole",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List available upgrade version",
        "operationId": "ListUpgradableVersion",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.UpgradableVersion"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create upgrade version",
        "operationId": "CreateUpgradableVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1/cluster-plan": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List all upgrade plan",
        "operationId": "ListUpgradePlane",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.UpgradePlan"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1/cluster-plan/{cluster-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List specified cluster upgrade plan",
        "operationId": "ListUpgradePlane",
        "parameters": [
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradePlan"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1/make/{cluster-id}/{version-name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Make a upgrade plan for specified cluster",
        "operationId": "MakeUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "version name",
            "name": "version-name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "cluster id",
            "name": "cluster-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradePlan"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1/plan/apply/{plan-id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "apply the plan do upgrade to cluster",
        "operationId": "ApplyUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "plan id",
            "name": "plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1/plan/{plan-id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "show detail about an upgrade plan",
        "operationId": "UpgradePlanDetail",
        "parameters": [
          {
            "type": "string",
            "description": "plan id",
            "name": "plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete an upgrade plan",
        "operationId": "DeleteUpgradePlan",
        "parameters": [
          {
            "type": "string",
            "description": "plan id",
            "name": "plan-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "412": {
            "description": "Precondition check failed",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/upgrade/v1/{version-name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "update upgrade version",
        "operationId": "UpdateUpgradableVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          {
            "type": "string",
            "description": "version name",
            "name": "version-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete upgrade version",
        "operationId": "DeleteUpgradableVersion",
        "parameters": [
          {
            "type": "string",
            "description": "version name",
            "name": "version-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.UpgradableVersion"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/user/v1": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create User",
        "operationId": "CreateOrUpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/user/v1/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Login",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Token%20string%20%22json:%5C%22token%5C%22%22;%20ExpiredDate%20string%20%22json:%5C%22expired_date%5C%22%22;%20Permission%20uint64%20%22json:%5C%22permission%5C%22%22;%20User%20schema.User%20%22json:%5C%22user%5C%22%22%20%7D"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/user/v1/users": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List User Info",
        "operationId": "ListUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schema.User"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    },
    "/api/user/v1/{username}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get User Info",
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update User Info",
        "operationId": "CreateOrUpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/struct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22;%20Username%20string%20%22json:%5C%22username,omitempty%5C%22%22;%20Password%20string%20%22json:%5C%22password,omitempty%5C%22%22;%20Roles%20%7C%7Cstruct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22%20%7D%20%22json:%5C%22roles,omitempty%5C%22%20description:%5C%22contain%20one%20or%20more%20roles%5C%22%22%20%7D"
            }
          },
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schema.User"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete User",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/schema.HttpErrorResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ceph.Ceph": {
      "required": [
        "enable",
        "ceph_cluster_id",
        "monitor_ip_list",
        "pool_user_id",
        "pool_user_key",
        "storage_class_name",
        "reclaim_policy"
      ],
      "properties": {
        "ceph_cluster_id": {
          "description": "ceph cluster fsid",
          "type": "string"
        },
        "enable": {
          "description": "enable or disable nfs interfacing,default=false",
          "type": "boolean"
        },
        "monitor_ip_list": {
          "description": "ceph monitor node ip",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pool_user_id": {
          "description": "ceph osd pool user id",
          "type": "string"
        },
        "pool_user_key": {
          "description": "ceph osd pool user key",
          "type": "string"
        },
        "reclaim_policy": {
          "description": "required when enable=true,behavior of delete ceph storage class pvc",
          "type": "string"
        },
        "status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "storage_class_name": {
          "description": "required when enable=true,e.g. ceph-csi",
          "type": "string"
        }
      }
    },
    "console.DeployConsole": {
      "required": [
        "enable",
        "vendor_tag",
        "tls_enable"
      ],
      "properties": {
        "cert_manager_issuer": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "tls_enable": {
          "type": "boolean"
        },
        "vendor_tag": {
          "type": "string"
        }
      }
    },
    "coredns.DNSDomain": {
      "required": [
        "top_level_domain",
        "domain",
        "domain_resolve"
      ],
      "properties": {
        "action": {
          "description": "auto generator, do not input",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain": {
          "description": "domain name unique",
          "type": "string"
        },
        "domain_resolve": {
          "description": "ip address list of this domain resolve to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/coredns.DomainResolve"
          }
        },
        "top_level_domain": {
          "description": "top level domain name",
          "type": "string"
        }
      }
    },
    "coredns.DNSDomainUpdateDocSchema": {
      "required": [
        "top_level_domain",
        "domain",
        "domain_resolve"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "domain": {
          "description": "domain name unique",
          "type": "string"
        },
        "domain_resolve": {
          "description": "ip address list of this domain resolve to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/coredns.DomainResolveDocSchema"
          }
        },
        "top_level_domain": {
          "description": "top level domain name",
          "type": "string"
        }
      }
    },
    "coredns.DomainResolve": {
      "required": [
        "record_type",
        "ip_address"
      ],
      "properties": {
        "ip_address": {
          "description": "ip address of the domain resolve to",
          "type": "string"
        },
        "record_type": {
          "description": "dns record type",
          "type": "string",
          "enum": [
            "A",
            "AAAA"
          ]
        },
        "resolve_domain": {
          "description": "auto generator, do not input",
          "type": "string"
        }
      }
    },
    "coredns.DomainResolveDocSchema": {
      "required": [
        "record_type",
        "ip_address"
      ],
      "properties": {
        "ip_address": {
          "description": "ip address of the domain resolve to",
          "type": "string"
        },
        "record_type": {
          "description": "dns record type",
          "type": "string",
          "enum": [
            "A",
            "AAAA"
          ]
        }
      }
    },
    "coredns.TopLevelDomain": {
      "required": [
        "domain",
        "domain_counts"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "domain": {
          "description": "domain name unique",
          "type": "string"
        },
        "domain_counts": {
          "description": "auto generator, do not input",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "dep.DepArch": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/dep.DepPackage"
      }
    },
    "dep.DepPackage": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "dep.DepVersion": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/dep.DepArch"
      }
    },
    "dns.Server": {
      "required": [
        "enable",
        "data_provider_url"
      ],
      "properties": {
        "ask_frequency": {
          "description": "dns ask frequency if mode set to listen",
          "type": "integer",
          "format": "int32"
        },
        "data_provider_url": {
          "description": "data provider url",
          "type": "string"
        },
        "enable": {
          "description": "enable or disable dns server deploy,default=false",
          "type": "boolean"
        },
        "mode": {
          "description": "dns mode, default listen",
          "type": "string"
        },
        "mq_password": {
          "description": "message queue password if mode set to ask",
          "type": "string"
        },
        "mq_port": {
          "description": "message queue port if mode set to ask",
          "type": "integer",
          "format": "int32"
        },
        "mq_servers": {
          "description": "message queue server address if mode set to ask, e.g. 10.0.0.200,10.0.0.202,10.0.0.203",
          "type": "string"
        },
        "mq_subject": {
          "description": "message queue subject if mode set to ask",
          "type": "string"
        },
        "mq_username": {
          "description": "message queue username if mode set to ask",
          "type": "string"
        },
        "upstream": {
          "description": "dns upstream",
          "type": "string"
        }
      }
    },
    "dns.UpStreamServer": {
      "required": [
        "enable",
        "addresses"
      ],
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enable": {
          "description": "enable or disable dns server deploy,default=false",
          "type": "boolean"
        }
      }
    },
    "efk.DeployEFK": {
      "required": [
        "enable",
        "storage_class_name"
      ],
      "properties": {
        "enable": {
          "description": "enable or disable EFK,default=false",
          "type": "boolean"
        },
        "namespace": {
          "description": "namespace of EFK used in k8s,default=efk",
          "type": "string"
        },
        "password": {
          "description": "only used when ingress is active, default=admin",
          "type": "string"
        },
        "replicas": {
          "description": "the copy of efk container,default=1",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "storage_class_name": {
          "description": "required when enable=true,should input storage class name of openstack provider storage class or nfs storage class",
          "type": "string"
        },
        "user": {
          "description": "only used when ingress is active, default=admin",
          "type": "string"
        }
      }
    },
    "gap.DeployGAP": {
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "helm.Helm": {
      "required": [
        "enable",
        "helm_version"
      ],
      "properties": {
        "enable": {
          "description": "enable or disable helm,default=false",
          "type": "boolean"
        },
        "helm_version": {
          "description": "version of helm",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        }
      }
    },
    "kubesphere.GeneralEnabled": {
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "enable",
          "type": "boolean"
        }
      }
    },
    "kubesphere.KSAlertingConfig": {
      "required": [
        "enabled",
        "ruler_replica"
      ],
      "properties": {
        "enabled": {
          "description": "enable",
          "type": "boolean"
        },
        "ruler_replica": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kubesphere.KSClusterConfig": {
      "required": [
        "enabled",
        "is_managed_by_kubefed",
        "multicluster",
        "openpitrix"
      ],
      "properties": {
        "alerting": {
          "description": "(CPU: 0.3 Core, Memory: 300 MiB) Whether to install KubeSphere alerting system. It enables Users to customize alerting policies to send messages to receivers in time with different time intervals and alerting levels to choose from.",
          "$ref": "#/definitions/kubesphere.KSAlertingConfig"
        },
        "auditing": {
          "description": "Whether to install KubeSphere audit log system. It provides a security-relevant chronological set of records，recording the sequence of activities happened in platform, initiated by different tenants.",
          "$ref": "#/definitions/kubesphere.GeneralEnabled"
        },
        "console": {
          "description": "console params",
          "$ref": "#/definitions/kubesphere.KSConsoleConfig"
        },
        "devops": {
          "description": "(CPU: 0.47 Core, Memory: 8.6 G) Whether to install KubeSphere DevOps System. It provides out-of-box CI/CD system based on Jenkins, and automated workflow tools including Source-to-Image \u0026 Binary-to-Image.",
          "$ref": "#/definitions/kubesphere.KSDevOpsConfig"
        },
        "enabled": {
          "description": "enable",
          "type": "boolean"
        },
        "es": {
          "description": "Storage backend for logging, events and auditing.",
          "$ref": "#/definitions/kubesphere.KSElasticSearchConfig"
        },
        "etcd_monitor": {
          "description": "etcd params",
          "$ref": "#/definitions/kubesphere.KSEtcdMonitorConfig"
        },
        "events": {
          "description": "Whether to install KubeSphere events system. It provides a graphical web console for Kubernetes Events exporting, filtering and alerting in multi-tenant Kubernetes clusters.",
          "$ref": "#/definitions/kubesphere.KSEventsConfig"
        },
        "is_managed_by_kubefed": {
          "type": "boolean"
        },
        "logging": {
          "description": "(CPU: 57 m, Memory: 2.76 G) Whether to install KubeSphere logging system. Flexible logging functions are provided for log query, collection and management in a unified console. Additional log collectors can be added, such as Elasticsearch, Kafka and Fluentd.",
          "$ref": "#/definitions/kubesphere.KSLoggingConfig"
        },
        "member_of_cluster": {
          "description": "id of host cluster",
          "type": "string"
        },
        "metrics_server": {
          "description": "(CPU: 56 m, Memory: 44.35 MiB) Whether to install metrics-server. IT enables HPA (Horizontal Pod Autoscaler).",
          "$ref": "#/definitions/kubesphere.GeneralEnabled"
        },
        "monitor": {
          "description": "monitoring params",
          "$ref": "#/definitions/kubesphere.KSMonitorConfig"
        },
        "multicluster": {
          "description": "multicluster params",
          "$ref": "#/definitions/kubesphere.KSMultiClusterConfig"
        },
        "network": {
          "$ref": "#/definitions/kubesphere.KSNetworkConfig"
        },
        "openpitrix": {
          "description": "(2 Core, 3.6 G) Whether to install KubeSphere Application Store. It provides an application store for Helm-based applications, and offer application lifecycle management.",
          "$ref": "#/definitions/kubesphere.GeneralEnabled"
        },
        "server": {
          "$ref": "#/definitions/kubesphere.KSServerConfig"
        },
        "servicemesh": {
          "description": "(0.3 Core, 300 MiB) Whether to install KubeSphere Service Mesh (Istio-based). It provides fine-grained traffic management, observability and tracing, and offer visualization for traffic topology.",
          "$ref": "#/definitions/kubesphere.GeneralEnabled"
        },
        "status": {
          "description": "Status",
          "type": "string"
        }
      }
    },
    "kubesphere.KSConsoleConfig": {
      "required": [
        "enable_multi_login",
        "port"
      ],
      "properties": {
        "enable_multi_login": {
          "description": "enable/disable multiple sing on, it allows an account can be used by different users at the same time.",
          "type": "boolean"
        },
        "port": {
          "description": "port",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kubesphere.KSDevOpsConfig": {
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "enable",
          "type": "boolean"
        },
        "jenkins_java_opts_max_ram": {
          "description": "jenkinsJavaOpts_MaxRAM",
          "type": "string"
        },
        "jenkins_java_opts_xms": {
          "description": "The following three fields are JVM parameters.",
          "type": "string"
        },
        "jenkins_java_opts_xmx": {
          "description": "jenkinsJavaOpts_Xmx",
          "type": "string"
        },
        "jenkins_memory_limit": {
          "description": "Jenkins memory limit.",
          "type": "string"
        },
        "jenkins_memory_request": {
          "description": "Jenkins memory request.",
          "type": "string"
        },
        "jenkins_volume_size": {
          "description": "Jenkins volume size.",
          "type": "string"
        }
      }
    },
    "kubesphere.KSElasticSearchConfig": {
      "required": [
        "elasticsearch_master_volume_size",
        "elasticsearch_data_volume_size"
      ],
      "properties": {
        "elasticsearch_data_replicas": {
          "description": "total number of data nodes.",
          "type": "integer",
          "format": "int32"
        },
        "elasticsearch_data_volume_size": {
          "description": "Volume size of Elasticsearch data nodes.",
          "type": "string"
        },
        "elasticsearch_master_replicas": {
          "description": "total number of master nodes, it's not allowed to use even number",
          "type": "integer",
          "format": "int32"
        },
        "elasticsearch_master_volume_size": {
          "description": "Volume size of Elasticsearch master nodes.",
          "type": "string"
        },
        "elk_prefix": {
          "description": "The string making up index names. The index name will be formatted as ks-\u003celk_prefix\u003e-log.",
          "type": "string",
          "enum": [
            "logstash"
          ]
        },
        "log_max_age": {
          "description": "Log retention time in built-in Elasticsearch, it is 7 days by default.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kubesphere.KSEtcdMonitorConfig": {
      "required": [
        "enabled",
        "endpoint_ips",
        "port",
        "tls_enable"
      ],
      "properties": {
        "enabled": {
          "description": "Whether to enable etcd monitoring dashboard installation. You have to create a secret for etcd before you enable it.",
          "type": "boolean"
        },
        "endpoint_ips": {
          "description": "etcd cluster EndpointIps, it can be a bunch of IPs here.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "port": {
          "description": "etcd port",
          "type": "integer",
          "format": "int32"
        },
        "tls_enable": {
          "description": "tls enable",
          "type": "boolean"
        }
      }
    },
    "kubesphere.KSEventsConfig": {
      "required": [
        "enabled",
        "ruler_replicas"
      ],
      "properties": {
        "enabled": {
          "description": "enable",
          "type": "boolean"
        },
        "ruler_replicas": {
          "description": "replicas",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kubesphere.KSLoggingConfig": {
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "description": "enable",
          "type": "boolean"
        },
        "logsidecar_replicas": {
          "description": "logsidecar replicas",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kubesphere.KSMonitorConfig": {
      "required": [
        "storage_class",
        "monitor_endpoint"
      ],
      "properties": {
        "alertmanager_replicas": {
          "description": "AlertManager Replicas.",
          "type": "integer",
          "format": "int32"
        },
        "monitor_endpoint": {
          "description": "prometheus endpoint address",
          "type": "string"
        },
        "prometheus_memory_request": {
          "description": "Prometheus request memory.",
          "type": "string"
        },
        "prometheus_replicas": {
          "description": "Prometheus replicas are responsible for monitoring different segments of data source and provide high availability as well.",
          "type": "integer",
          "format": "int32"
        },
        "prometheus_volume_size": {
          "description": "Prometheus PVC size.",
          "type": "string"
        },
        "storage_class": {
          "type": "string"
        }
      }
    },
    "kubesphere.KSMultiClusterConfig": {
      "required": [
        "cluster_role",
        "cluster_type"
      ],
      "properties": {
        "cluster_role": {
          "description": "host | member | none  # You can install a solo cluster, or specify it as the role of host or member cluster.",
          "type": "string",
          "enum": [
            "host",
            "member",
            "none"
          ]
        },
        "cluster_type": {
          "description": "choose from production|testing|demo|development",
          "type": "string",
          "enum": [
            "production",
            "testing",
            "demo",
            "development"
          ]
        }
      }
    },
    "kubesphere.KSNetworkConfig": {
      "required": [
        "np_enabled"
      ],
      "properties": {
        "ip_pool": {
          "description": "if calico cni is integrated then use the value calico, none means that the ippool function is disabled",
          "type": "string"
        },
        "np_enabled": {
          "description": "Network policies allow network isolation within the same cluster, which means firewalls can be set up between certain instances (Pods). Make sure that the CNI network plugin used by the cluster supports NetworkPolicy. There are a number of CNI network plugins that support NetworkPolicy, including Calico, Cilium, Kube-router, Romana and Weave Net.",
          "type": "boolean"
        },
        "topology": {
          "description": "only support weave-scope",
          "type": "string"
        }
      }
    },
    "kubesphere.KSServerConfig": {
      "required": [
        "storage_class",
        "jwt_secret"
      ],
      "properties": {
        "jwt_secret": {
          "description": "Keep the jwtSecret consistent with the host cluster. Retrive the jwtSecret by executing \"kubectl -n kubesphere-system get cm kubesphere-config -o yaml | grep -v \"apiVersion\" | grep jwtSecret\" on the host cluster.",
          "type": "string"
        },
        "local_registry_server": {
          "description": "registry server addr. example: 127.0.0.1:5000",
          "type": "string"
        },
        "minio_volume_size": {
          "description": "Minio PVC size.",
          "type": "string"
        },
        "openldap_volume_size": {
          "description": "openldap PVC size.",
          "type": "string"
        },
        "redis_volume_size": {
          "description": "Redis PVC size.",
          "type": "string"
        },
        "storage_class": {
          "description": "If there is not a default StorageClass in your cluster, you need to specify an existing StorageClass here.",
          "type": "string"
        }
      }
    },
    "map[string]uint8": {
      "type": "object",
      "additionalProperties": {
        "type": "integer"
      }
    },
    "middle_platform.DB": {
      "properties": {
        "host": {
          "description": "hostname of the db created by by PostgresOperator,default=middle-db",
          "type": "string"
        },
        "name": {
          "description": "database name of the db created by by PostgresOperator,default=maccount",
          "type": "string"
        },
        "password": {
          "description": "password of postgres db created by PostgresOperator, default=enfefjk35k35j4k6",
          "type": "string"
        },
        "replicas": {
          "description": "auto generated, do not input and all input will be ignore",
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "description": "username of postgres db created by PostgresOperator, default=middle",
          "type": "string"
        }
      }
    },
    "middle_platform.DeployMiddlePlatform": {
      "required": [
        "enable",
        "db",
        "pgo",
        "ldap",
        "enable_license",
        "status"
      ],
      "properties": {
        "db": {
          "description": "middle platform postgres section",
          "$ref": "#/definitions/middle_platform.DB"
        },
        "enable": {
          "description": "enable or disable middle platform",
          "type": "boolean"
        },
        "enable_license": {
          "description": "Deprecated, will be remove in future",
          "type": "boolean"
        },
        "ldap": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/middle_platform.LDAP"
        },
        "namespace": {
          "description": "middle platform namespace",
          "type": "string"
        },
        "pgo": {
          "description": "middle platform postgres section",
          "$ref": "#/definitions/postgres_operator.DeployPostgresOperator"
        },
        "status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "sys_admin_password": {
          "description": "middle platform admin's password",
          "type": "string"
        }
      }
    },
    "middle_platform.LDAP": {
      "required": [
        "enable"
      ],
      "properties": {
        "addr": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "admin_password": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "admin_user": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "caas_deploy": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/openldap.DeployOpenLDAP"
        },
        "domain_name": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "enable": {
          "description": "Deprecated, will be remove in future",
          "type": "boolean"
        }
      }
    },
    "minio.DeployMinIO": {
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "description": "enable",
          "type": "boolean"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "nfs.NFS": {
      "required": [
        "enable",
        "nfs_server_address",
        "nfs_path",
        "reclaim_policy",
        "storage_class_name"
      ],
      "properties": {
        "enable": {
          "description": "enable or disable nfs interfacing,default=false",
          "type": "boolean"
        },
        "mount_options": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nfs_path": {
          "description": "required when enable=true,nfs server nfs path",
          "type": "string"
        },
        "nfs_server_address": {
          "description": "required when enable=true,nfs server address",
          "type": "string"
        },
        "reclaim_policy": {
          "description": "required when enable=true,behavior of delete nfs storage class pvc",
          "type": "string"
        },
        "status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "storage_class_name": {
          "description": "required when enable=true,e.g. nfs-csi",
          "type": "string"
        }
      }
    },
    "openldap.DeployOpenLDAP": {
      "required": [
        "storage_class"
      ],
      "properties": {
        "admin_password": {
          "type": "string"
        },
        "domain_name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "storage_class": {
          "type": "string"
        },
        "storage_size": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "postgres_operator.DeployPostgresOperator": {
      "required": [
        "enable"
      ],
      "properties": {
        "admin_password": {
          "description": "password of Postgres Operator, default=mep@123",
          "type": "string"
        },
        "admin_user": {
          "description": "username of Postgres Operator, default=admin",
          "type": "string"
        },
        "enable": {
          "description": "enable or disable operator, default=false",
          "type": "boolean"
        },
        "namespace": {
          "description": "postgres namespace, default=system-middleware-pg",
          "type": "string"
        },
        "status": {
          "description": "auto generated, do not input and all input will be ignore",
          "type": "string"
        },
        "storage_class": {
          "description": "required when enable=true,should input storage class name of openstack provider storage class or nfs storage class",
          "type": "string"
        },
        "storage_size": {
          "description": "size of the postgres db will use in k8s, it will fall back to default(5) when less than 5",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restarter.DeployAutoRestarter": {
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "schema.Addons": {
      "properties": {
        "auto_restarter": {
          "$ref": "#/definitions/restarter.DeployAutoRestarter"
        },
        "cloud_providers": {
          "$ref": "#/definitions/schema.CloudProvider"
        },
        "cluster_lb": {
          "$ref": "#/definitions/schema.ClusterLB"
        },
        "console": {
          "$ref": "#/definitions/console.DeployConsole"
        },
        "efk": {
          "$ref": "#/definitions/efk.DeployEFK"
        },
        "gap": {
          "$ref": "#/definitions/gap.DeployGAP"
        },
        "helm": {
          "$ref": "#/definitions/helm.Helm"
        },
        "middle_platform": {
          "$ref": "#/definitions/middle_platform.DeployMiddlePlatform"
        },
        "minio": {
          "$ref": "#/definitions/minio.DeployMinIO"
        },
        "pgo": {
          "$ref": "#/definitions/postgres_operator.DeployPostgresOperator"
        },
        "velero": {
          "$ref": "#/definitions/velero.DeployVelero"
        }
      }
    },
    "schema.Backup": {
      "required": [
        "backup_name"
      ],
      "properties": {
        "arg": {
          "description": "backup args",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "backup_name": {
          "description": "backup name",
          "type": "string"
        }
      }
    },
    "schema.BackupDetail": {
      "required": [
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "properties": {
        "kind": {
          "description": "Backup kind",
          "type": "string"
        },
        "metadata": {
          "description": "Backup Metadata",
          "$ref": "#/definitions/schema.BackupDetailMetadata"
        },
        "spec": {
          "description": "Backup Spec",
          "$ref": "#/definitions/schema.BackupDetailSpec"
        },
        "status": {
          "description": "Backup Status",
          "$ref": "#/definitions/schema.BackupDetailStatus"
        }
      }
    },
    "schema.BackupDetailMetadata": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "backup name",
          "type": "string"
        }
      }
    },
    "schema.BackupDetailSpec": {
      "required": [
        "ttl"
      ],
      "properties": {
        "ttl": {
          "description": "backup effective duration",
          "type": "string"
        }
      }
    },
    "schema.BackupDetailStatus": {
      "required": [
        "phase",
        "expiration",
        "startTimestamp",
        "completionTimestamp"
      ],
      "properties": {
        "completionTimestamp": {
          "description": "backup complete time",
          "type": "string"
        },
        "expiration": {
          "description": "expiration time",
          "type": "string"
        },
        "phase": {
          "description": "backup status",
          "type": "string"
        },
        "startTimestamp": {
          "description": "start backup time",
          "type": "string"
        }
      }
    },
    "schema.BackupList": {
      "required": [
        "kind",
        "cluster_name",
        "region",
        "items"
      ],
      "properties": {
        "cluster_name": {
          "description": "cluster name",
          "type": "string"
        },
        "items": {
          "description": "backup detail list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.BackupDetail"
          }
        },
        "kind": {
          "description": "BackupList kind",
          "type": "string"
        },
        "region": {
          "description": "region",
          "type": "string"
        }
      }
    },
    "schema.BackupRegular": {
      "properties": {
        "arg": {
          "description": "backup regular args",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "backup_regular_name": {
          "description": "backup regular name",
          "type": "string"
        },
        "cronjob_time": {
          "type": "string"
        }
      }
    },
    "schema.BackupRegularlyDetail": {
      "required": [
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/schema.BackupRegularlyMetadata"
        },
        "spec": {
          "$ref": "#/definitions/schema.BackupRegularlySpec"
        },
        "status": {
          "$ref": "#/definitions/schema.BackupRegularlyStatus"
        }
      }
    },
    "schema.BackupRegularlyMetadata": {
      "required": [
        "name",
        "creationTimestamp"
      ],
      "properties": {
        "creationTimestamp": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "schema.BackupRegularlySpec": {
      "required": [
        "schedule"
      ],
      "properties": {
        "schedule": {
          "type": "string"
        }
      }
    },
    "schema.BackupRegularlyStatus": {
      "required": [
        "lastScheduleTime"
      ],
      "properties": {
        "lastScheduleTime": {
          "type": "string"
        }
      }
    },
    "schema.CNI": {
      "required": [
        "cni_type",
        "pod_v4_cidr"
      ],
      "properties": {
        "calico": {
          "description": "calico config section",
          "$ref": "#/definitions/schema.Calico"
        },
        "cni_type": {
          "description": "choose box, only support calico so far",
          "type": "string",
          "enum": [
            "calico"
          ]
        },
        "cni_version": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "mtu": {
          "description": "mtu",
          "type": "integer",
          "format": "int32"
        },
        "pod_v4_cidr": {
          "description": "pod cidr v4",
          "type": "string"
        },
        "pod_v6_cidr": {
          "description": "pod cidr v6",
          "type": "string"
        }
      }
    },
    "schema.CaaSGlobalRoles": {
      "properties": {
        "metadata": {
          "description": "user rule metadata",
          "$ref": "#/definitions/schema.CaasRuleMetadata"
        },
        "rules": {
          "description": "user rule list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.CaaSRules"
          }
        }
      }
    },
    "schema.CaaSRuleMetadataAnnotations": {
      "properties": {
        "iam.kubesphere.io/dependencies": {
          "description": "user rule-Annotations Dependencies",
          "type": "string"
        },
        "iam.kubesphere.io/module": {
          "description": "user rule-Annotations Module",
          "type": "string"
        },
        "iam.kubesphere.io/role-template-rules": {
          "description": "user rule-Annotations RoleTemplateRules",
          "type": "string"
        }
      }
    },
    "schema.CaaSRuleMetadataLabels": {
      "properties": {
        "iam.kubesphere.io/role-template": {
          "description": "user rule-RoleTemplate",
          "type": "string"
        },
        "kubefed.io/managed": {
          "description": "user rule-Managed",
          "type": "string"
        }
      }
    },
    "schema.CaaSRules": {
      "properties": {
        "apiGroups": {
          "description": "user rule-APIGroups",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "user rule-Resources",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "user rule-Verbs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "schema.CaasRuleMetadata": {
      "properties": {
        "annotations": {
          "description": "user rule-Annotations",
          "$ref": "#/definitions/schema.CaaSRuleMetadataAnnotations"
        },
        "labels": {
          "description": "user rule metadata-labels",
          "$ref": "#/definitions/schema.CaaSRuleMetadataLabels"
        },
        "name": {
          "description": "user rule metadata-name",
          "type": "string"
        }
      }
    },
    "schema.Calico": {
      "required": [
        "calico_mode"
      ],
      "properties": {
        "calico_mode": {
          "type": "string",
          "enum": [
            "BGP",
            "Overlay-IPIP-All",
            "Overlay-IPIP-Cross-Subnet",
            "Overlay-Vxlan-All",
            "Overlay-Vxlan-Cross-Subnet",
            "overlay"
          ]
        },
        "enable_dual_stack": {
          "description": "enable dual stack or not, default=false",
          "type": "boolean"
        },
        "ip6_autodetection": {
          "description": "default value is 'first-found'', also can be: 'can-reach=DESTINATION', 'interface=INTERFACE-REGEX'', 'skip-interface=INTERFACE-REGEX', detail see doc https://docs.projectcalico.org/reference/node/configuration#ip-setting",
          "type": "string"
        },
        "ip_autodetection": {
          "description": "default value is 'first-found'', also can be: 'can-reach=DESTINATION', 'interface=INTERFACE-REGEX'', 'skip-interface=INTERFACE-REGEX', detail see doc https://docs.projectcalico.org/reference/node/configuration#ip-setting",
          "type": "string"
        }
      }
    },
    "schema.CinderConfig": {
      "required": [
        "backend_type",
        "availability_zone",
        "storage_class_name"
      ],
      "properties": {
        "availability_zone": {
          "type": "string"
        },
        "backend_type": {
          "type": "string"
        },
        "reclaim_policy": {
          "type": "string"
        },
        "storage_class_name": {
          "type": "string"
        }
      }
    },
    "schema.CloudProvider": {
      "required": [
        "openstack",
        "alibaba_cloud",
        "azure",
        "aws",
        "cloud_provider_metadata"
      ],
      "properties": {
        "alibaba_cloud": {
          "$ref": "#/definitions/schema.CloudProviderAlibabaCloud"
        },
        "aws": {
          "$ref": "#/definitions/schema.CloudProviderAWS"
        },
        "azure": {
          "$ref": "#/definitions/schema.CloudProviderAzure"
        },
        "cloud_provider_metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "openstack": {
          "$ref": "#/definitions/schema.CloudProviderOpenStack"
        }
      }
    },
    "schema.CloudProviderAWS": {
      "properties": {
        "enable": {
          "type": "boolean"
        }
      }
    },
    "schema.CloudProviderAlibabaCloud": {
      "properties": {
        "enable": {
          "type": "boolean"
        }
      }
    },
    "schema.CloudProviderAzure": {
      "properties": {
        "enable": {
          "type": "boolean"
        }
      }
    },
    "schema.CloudProviderOpenStack": {
      "required": [
        "enable",
        "username",
        "password",
        "auth_url",
        "project_id",
        "domain_id",
        "region",
        "cinder"
      ],
      "properties": {
        "auth_url": {
          "type": "string"
        },
        "ca_cert": {
          "type": "string"
        },
        "cinder": {
          "$ref": "#/definitions/schema.CinderConfig"
        },
        "domain_id": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "schema.Cluster": {
      "required": [
        "cluster_name",
        "control_plane",
        "container_runtime",
        "cni",
        "masters",
        "cluster_role",
        "cluster_installer"
      ],
      "properties": {
        "action": {
          "description": "auto generated, do not input and all input will be ignore",
          "type": "string"
        },
        "additional_version_dep": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dep.DepVersion"
          }
        },
        "addons_proxy_ip": {
          "description": "addons float ip",
          "type": "string"
        },
        "auto_restarter": {
          "description": "auto restarter controller",
          "$ref": "#/definitions/restarter.DeployAutoRestarter"
        },
        "backup_regular_enable": {
          "description": "regular backup enable",
          "type": "boolean"
        },
        "backup_regular_name": {
          "description": "regular backup name",
          "type": "string"
        },
        "cloud_providers": {
          "description": "Cloud provider config",
          "$ref": "#/definitions/schema.CloudProvider"
        },
        "cluster_admin_token": {
          "description": "cluster admin sa token,api input will be ignored",
          "type": "string"
        },
        "cluster_dns_upstream": {
          "description": "cluster dns upstream",
          "$ref": "#/definitions/dns.UpStreamServer"
        },
        "cluster_id": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "cluster_installer": {
          "description": "kubeadm or rancher, if value input not one of kubeadm or rancher then value will set to kubeadm",
          "type": "string"
        },
        "cluster_lb": {
          "description": "External lb object",
          "$ref": "#/definitions/schema.ClusterLB"
        },
        "cluster_name": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "cluster_operation_ids": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cluster_role": {
          "description": "cluster role: host、member",
          "type": "string"
        },
        "cluster_status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "cni": {
          "description": "container network interface section",
          "$ref": "#/definitions/schema.CNI"
        },
        "console": {
          "description": "console section",
          "$ref": "#/definitions/console.DeployConsole"
        },
        "container_runtime": {
          "description": "container runtime section",
          "$ref": "#/definitions/schema.ContainerRuntime"
        },
        "control_plane": {
          "$ref": "#/definitions/schema.ControlPlane"
        },
        "current_operation": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "date_created": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "date_modified": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "description": {
          "description": "cluster description",
          "type": "string"
        },
        "dns_server_deploy": {
          "description": "dns server deploy",
          "$ref": "#/definitions/dns.Server"
        },
        "efk": {
          "description": "postgres EFK section",
          "$ref": "#/definitions/efk.DeployEFK"
        },
        "external_lb": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.ExternalLB"
        },
        "gap": {
          "description": "postgres GAP section",
          "$ref": "#/definitions/gap.DeployGAP"
        },
        "harbor": {
          "description": "harbor interfacing",
          "$ref": "#/definitions/schema.Harbor"
        },
        "helm": {
          "description": "postgres helm section",
          "$ref": "#/definitions/helm.Helm"
        },
        "ingresses": {
          "description": "Ingress nodes list",
          "$ref": "#/definitions/schema.Ingress"
        },
        "is_protected": {
          "description": "whether this cluster can or cannot be deleted",
          "type": "boolean"
        },
        "ks_cluster_conf": {
          "description": "Kubesphere cluster conf",
          "$ref": "#/definitions/kubesphere.KSClusterConfig"
        },
        "masters": {
          "description": "Master nodes list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        },
        "middle_platform": {
          "description": "middle platform section",
          "$ref": "#/definitions/middle_platform.DeployMiddlePlatform"
        },
        "mock": {
          "description": "mock means only during cluster install or destroy setup only change data in db and do not actually install or destroy cluster",
          "type": "boolean"
        },
        "pgo": {
          "description": "postgres operator section",
          "$ref": "#/definitions/postgres_operator.DeployPostgresOperator"
        },
        "rancher": {
          "description": "parameters required to operate rancher",
          "$ref": "#/definitions/schema.RancherRequest"
        },
        "reclaim_namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "region": {
          "description": "region id",
          "type": "string"
        },
        "storage": {
          "description": "storage section required",
          "$ref": "#/definitions/schema.Storage"
        },
        "workers": {
          "description": "Worker nodes list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        }
      }
    },
    "schema.ClusterApi": {
      "required": [
        "cluster_name",
        "control_plane",
        "container_runtime",
        "cni",
        "masters",
        "cluster_role",
        "cluster_installer"
      ],
      "properties": {
        "action": {
          "description": "auto generated, do not input and all input will be ignore",
          "type": "string"
        },
        "addons_proxy_ip": {
          "description": "addons float ip",
          "type": "string"
        },
        "auto_restarter": {
          "description": "auto restarter controller",
          "$ref": "#/definitions/restarter.DeployAutoRestarter"
        },
        "backup_regular_enable": {
          "description": "regular backup enable",
          "type": "boolean"
        },
        "backup_regular_name": {
          "description": "regular backup name",
          "type": "string"
        },
        "cloud_providers": {
          "description": "Cloud provider config",
          "$ref": "#/definitions/schema.CloudProvider"
        },
        "cluster_admin_token": {
          "description": "cluster admin sa token,api input will be ignored",
          "type": "string"
        },
        "cluster_dns_upstream": {
          "description": "cluster dns upstream",
          "$ref": "#/definitions/dns.UpStreamServer"
        },
        "cluster_id": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "cluster_installer": {
          "description": "kubeadm or rancher, if value input not one of kubeadm or rancher then value will set to kubeadm",
          "type": "string"
        },
        "cluster_lb": {
          "description": "External lb object",
          "$ref": "#/definitions/schema.ClusterLB"
        },
        "cluster_name": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "cluster_operation_ids": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cluster_role": {
          "description": "cluster role: host、member",
          "type": "string"
        },
        "cluster_status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "cni": {
          "description": "container network interface section",
          "$ref": "#/definitions/schema.CNI"
        },
        "console": {
          "description": "console section",
          "$ref": "#/definitions/console.DeployConsole"
        },
        "container_runtime": {
          "description": "container runtime section",
          "$ref": "#/definitions/schema.ContainerRuntime"
        },
        "control_plane": {
          "$ref": "#/definitions/schema.ControlPlane"
        },
        "current_operation": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "date_created": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "date_modified": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "description": {
          "description": "cluster description",
          "type": "string"
        },
        "dns_server_deploy": {
          "description": "dns server deploy",
          "$ref": "#/definitions/dns.Server"
        },
        "efk": {
          "description": "postgres EFK section",
          "$ref": "#/definitions/efk.DeployEFK"
        },
        "external_lb": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.ExternalLB"
        },
        "gap": {
          "description": "postgres GAP section",
          "$ref": "#/definitions/gap.DeployGAP"
        },
        "harbor": {
          "description": "harbor interfacing",
          "$ref": "#/definitions/schema.Harbor"
        },
        "helm": {
          "description": "postgres helm section",
          "$ref": "#/definitions/helm.Helm"
        },
        "ingresses": {
          "description": "Ingress nodes list",
          "$ref": "#/definitions/schema.Ingress"
        },
        "is_protected": {
          "description": "whether this cluster can or cannot be deleted",
          "type": "boolean"
        },
        "ks_cluster_conf": {
          "description": "Kubesphere cluster conf",
          "$ref": "#/definitions/kubesphere.KSClusterConfig"
        },
        "masters": {
          "description": "Master nodes list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        },
        "middle_platform": {
          "description": "middle platform section",
          "$ref": "#/definitions/middle_platform.DeployMiddlePlatform"
        },
        "mock": {
          "description": "mock means only during cluster install or destroy setup only change data in db and do not actually install or destroy cluster",
          "type": "boolean"
        },
        "pgo": {
          "description": "postgres operator section",
          "$ref": "#/definitions/postgres_operator.DeployPostgresOperator"
        },
        "rancher": {
          "description": "parameters required to operate rancher",
          "$ref": "#/definitions/schema.RancherRequest"
        },
        "reclaim_namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "region": {
          "description": "region id",
          "type": "string"
        },
        "storage": {
          "description": "storage section required",
          "$ref": "#/definitions/schema.Storage"
        },
        "workers": {
          "description": "Worker nodes list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        }
      }
    },
    "schema.ClusterLB": {
      "required": [
        "enable",
        "nodes",
        "vip"
      ],
      "properties": {
        "enable": {
          "description": "enable or disable",
          "type": "boolean"
        },
        "nodes": {
          "description": "related nodes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        },
        "router_id": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "vip": {
          "description": "external lb vip",
          "type": "string"
        }
      }
    },
    "schema.ClusterNode": {
      "required": [
        "node-id"
      ],
      "properties": {
        "node-id": {
          "type": "string"
        },
        "use_virtual_kubelet": {
          "description": "Deprecated, will be remove in future",
          "type": "boolean"
        },
        "virtual_kubelet": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.VirtualKubelet"
        }
      }
    },
    "schema.ClusterTemplate": {
      "required": [
        "container_runtime"
      ],
      "properties": {
        "cloud_providers": {
          "$ref": "#/definitions/schema.CloudProvider"
        },
        "cluster_dns_upstream": {
          "description": "cluster dns upstream",
          "$ref": "#/definitions/dns.UpStreamServer"
        },
        "console": {
          "$ref": "#/definitions/console.DeployConsole"
        },
        "container_runtime": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ContainerRuntime"
          }
        },
        "efk": {
          "$ref": "#/definitions/efk.DeployEFK"
        },
        "gap": {
          "$ref": "#/definitions/gap.DeployGAP"
        },
        "ks_cluster_conf": {
          "description": "Kubesphere cluster conf",
          "$ref": "#/definitions/kubesphere.KSClusterConfig"
        },
        "ks_host": {
          "type": "string"
        },
        "middle_platform": {
          "$ref": "#/definitions/middle_platform.DeployMiddlePlatform"
        },
        "pgo": {
          "$ref": "#/definitions/postgres_operator.DeployPostgresOperator"
        }
      }
    },
    "schema.ContainerRuntime": {
      "required": [
        "container_runtime_type"
      ],
      "properties": {
        "container_runtime_type": {
          "description": "container runtime type either docker or containerd",
          "type": "string",
          "enum": [
            "docker",
            "containerd"
          ]
        },
        "private_registry_address": {
          "description": "private registry address e.g. 10.0.0.20",
          "type": "string"
        },
        "private_registry_port": {
          "description": "private registry port e.g. 4000",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "schema.ControlPlane": {
      "required": [
        "service_v4_cidr"
      ],
      "properties": {
        "allow_virtual_kubelet": {
          "description": "Deprecated, will be remove in future",
          "type": "boolean"
        },
        "enable_ipvs": {
          "description": "enable ipvs or not, default=false",
          "type": "boolean"
        },
        "feature_gates": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "kubernetes_version": {
          "description": "auto generated,do not input and all input will be ignore",
          "type": "string"
        },
        "service_v4_cidr": {
          "description": "ipv4 service cidr",
          "type": "string"
        },
        "service_v6_cidr": {
          "description": "ipv6 service cidr",
          "type": "string"
        }
      }
    },
    "schema.ExternalLB": {
      "required": [
        "cluster_vip_ipv4",
        "lb-nodes"
      ],
      "properties": {
        "cluster_vip_ipv4": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "lb-nodes": {
          "description": "Deprecated, will be remove in future",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        }
      }
    },
    "schema.Harbor": {
      "required": [
        "ip",
        "port",
        "user_name",
        "password"
      ],
      "properties": {
        "ca": {
          "description": "ca string",
          "type": "string"
        },
        "cert": {
          "description": "cert string",
          "type": "string"
        },
        "enable": {
          "description": "enable or disable harbor interfacing,default=false",
          "type": "boolean"
        },
        "enable_tls": {
          "description": "whether enable tls or not",
          "type": "boolean"
        },
        "host": {
          "description": "harbor address e.g. caas.registry.com or caas.registry.com:8038",
          "type": "string"
        },
        "ip": {
          "description": "ip of host resolve",
          "type": "string"
        },
        "key": {
          "description": "key string",
          "type": "string"
        },
        "password": {
          "description": "password of harbor username ",
          "type": "string"
        },
        "port": {
          "description": "private registry port e.g. 4000",
          "type": "integer",
          "format": "int32"
        },
        "user_name": {
          "description": "harbor username",
          "type": "string"
        }
      }
    },
    "schema.HttpErrorResult": {
      "required": [
        "error_code",
        "error_message",
        "error_list"
      ],
      "properties": {
        "error_code": {
          "type": "integer",
          "format": "int32"
        },
        "error_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "error_message": {
          "type": "string"
        }
      }
    },
    "schema.ImageCheckState": {
      "required": [
        "name",
        "old_version",
        "change_to",
        "status"
      ],
      "properties": {
        "change_to": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "old_version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "schema.Ingress": {
      "required": [
        "ingress-nodes"
      ],
      "properties": {
        "enable": {
          "description": "true = install ingress with post data,false = do not install ingress only save post data in db only,this should be set to true when user set ingress node on dashboard ui",
          "type": "boolean"
        },
        "ingress-nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ClusterNode"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "schema.KubectlExec": {
      "required": [
        "cluster_id",
        "namespace",
        "labels",
        "containers",
        "command"
      ],
      "properties": {
        "cluster_id": {
          "description": "cluster id",
          "type": "string"
        },
        "command": {
          "description": "command to run",
          "type": "string"
        },
        "containers": {
          "description": "containers name",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "description": "labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      }
    },
    "schema.KubectlExecResult": {
      "required": [
        "pod_name",
        "with_error",
        "error_message",
        "container_result"
      ],
      "properties": {
        "container_result": {
          "description": "container command result",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "error_message": {
          "description": "error message",
          "type": "string"
        },
        "pod_name": {
          "description": "pod name",
          "type": "string"
        },
        "with_error": {
          "description": "does it result in error stat",
          "type": "boolean"
        }
      }
    },
    "schema.LicenseInfo": {
      "required": [
        "license"
      ],
      "properties": {
        "license": {
          "type": "string"
        }
      }
    },
    "schema.NodeInformation": {
      "required": [
        "node_id",
        "status",
        "is_disabled",
        "role",
        "supported",
        "node_ipv4_default_ip",
        "node_ipv4_default_gw",
        "node_ipv4_address_list",
        "node_ipv6_address_list",
        "system_info",
        "belongs_to_cluster",
        "container_runtime_type",
        "proxy_ipv_4_cidr",
        "kube_node_stat",
        "default_network_interface",
        "agent_status",
        "issue_list",
        "last_report_in_date",
        "cluster_installer"
      ],
      "properties": {
        "agent_status": {
          "description": "binary agent status",
          "type": "string"
        },
        "belongs_to_cluster": {
          "description": "node belong to cluster",
          "type": "string"
        },
        "cluster_installer": {
          "type": "string"
        },
        "container_runtime_type": {
          "description": "container runtime of node",
          "$ref": "#/definitions/schema.ContainerRuntime"
        },
        "default_network_interface": {
          "description": "default gw network interface name",
          "type": "string"
        },
        "is_disabled": {
          "description": "is node been disabled",
          "type": "boolean"
        },
        "issue_list": {
          "description": "issue list of the node such as mount point is not ready",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kube_node_stat": {
          "description": "stat of node in kubernetes cluster,only is valid when the node in k8s cluster",
          "type": "string"
        },
        "last_report_in_date": {
          "description": "node last report in date",
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "node_ipv4_address_list": {
          "description": "all ipv4 address of the node",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "node_ipv4_default_gw": {
          "description": "node ipv4 default gateway ip",
          "type": "string"
        },
        "node_ipv4_default_ip": {
          "description": "node ipv4 default gateway interface ip",
          "type": "string"
        },
        "node_ipv6_address_list": {
          "description": "all ipv6 address of the node",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "port_status": {
          "description": "do not input, port status only show in node detail api",
          "type": "string"
        },
        "proxy_ipv_4_cidr": {
          "description": "proxy ip address of node, only use when bastion not able to reach client ip but client can reach bastion ip",
          "type": "string"
        },
        "region": {
          "description": "node region status",
          "$ref": "#/definitions/schema.Region"
        },
        "role": {
          "description": "1 = master, 2 = worker , 4 = Ingress , 8 = ExternalLB",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "supported": {
          "description": "is node operation system is support",
          "type": "boolean"
        },
        "system_info": {
          "description": "system information detail from lib github.com/zcalusic/sysinfo",
          "$ref": "#/definitions/sysinfo.SysInfo"
        }
      }
    },
    "schema.OSFamilyCentos": {
      "properties": {
        "os_versions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schema.OSFamilyCentosVersion"
          }
        }
      }
    },
    "schema.OSFamilyCentosCpuArchAarch64": {
      "properties": {
        "rpms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.OSPackage"
          }
        }
      }
    },
    "schema.OSFamilyCentosCpuArchX8664": {
      "properties": {
        "rpms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.OSPackage"
          }
        }
      }
    },
    "schema.OSFamilyCentosVersion": {
      "required": [
        "x86_64",
        "aarch_64"
      ],
      "properties": {
        "aarch_64": {
          "$ref": "#/definitions/schema.OSFamilyCentosCpuArchAarch64"
        },
        "x86_64": {
          "$ref": "#/definitions/schema.OSFamilyCentosCpuArchX8664"
        }
      }
    },
    "schema.OSFamilyUbuntu": {
      "properties": {
        "os_versions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schema.OSFamilyUbuntuVersion"
          }
        }
      }
    },
    "schema.OSFamilyUbuntuCpuArchAarch64": {
      "properties": {
        "debs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.OSPackage"
          }
        }
      }
    },
    "schema.OSFamilyUbuntuCpuArchX8664": {
      "properties": {
        "debs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.OSPackage"
          }
        }
      }
    },
    "schema.OSFamilyUbuntuVersion": {
      "properties": {
        "aarch_64": {
          "$ref": "#/definitions/schema.OSFamilyUbuntuCpuArchAarch64"
        },
        "x86_64": {
          "$ref": "#/definitions/schema.OSFamilyUbuntuCpuArchX8664"
        }
      }
    },
    "schema.OSPackage": {
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "schema.Operation": {
      "required": [
        "operation_id",
        "operation_name",
        "status",
        "current_step",
        "operation_log",
        "logs",
        "cluster_id",
        "operation_type",
        "pre_step_return_data",
        "request_parameter",
        "date_created",
        "date_modified",
        "run_by_user",
        "host"
      ],
      "properties": {
        "cluster_id": {
          "type": "string"
        },
        "current_step": {
          "type": "integer",
          "format": "int32"
        },
        "date_created": {
          "type": "string"
        },
        "date_modified": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operation_id": {
          "type": "string"
        },
        "operation_log": {
          "type": "string"
        },
        "operation_name": {
          "type": "string"
        },
        "operation_type": {
          "type": "string"
        },
        "pre_step_return_data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "request_parameter": {
          "$ref": "#/definitions/schema.RequestParameter"
        },
        "run_by_user": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "schema.PackageCheckState": {
      "required": [
        "name",
        "status"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "schema.RancherRequest": {
      "required": [
        "rancher_addr",
        "rancher_token"
      ],
      "properties": {
        "managed_by_cluster_name": {
          "description": "rancher managed by cluster name",
          "type": "string"
        },
        "rancher_addr": {
          "description": "rancher addr, example: https://172.20.163.120",
          "type": "string"
        },
        "rancher_token": {
          "description": "rancher api token",
          "type": "string"
        }
      }
    },
    "schema.Region": {
      "required": [
        "name"
      ],
      "properties": {
        "creationTimestamp": {
          "description": "creation ts, auto generated",
          "type": "string"
        },
        "id": {
          "description": "region id, auto generated",
          "type": "string"
        },
        "name": {
          "description": "region name, format with hostname rfc1123",
          "type": "string"
        },
        "updateTimestamp": {
          "description": "update ts, auto generated",
          "type": "string"
        }
      }
    },
    "schema.RequestParameter": {
      "required": [
        "body_parameters",
        "query_parameters",
        "runtime_parameters"
      ],
      "properties": {
        "body_parameters": {
          "$ref": "#/definitions/schema.RequestParameter.body_parameters"
        },
        "query_parameters": {
          "type": "object"
        },
        "runtime_parameters": {
          "type": "object"
        }
      }
    },
    "schema.RequestParameter.body_parameters": {},
    "schema.RestoreDetail": {
      "required": [
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "properties": {
        "kind": {
          "description": "restore kind",
          "type": "string"
        },
        "metadata": {
          "description": "restore Metadata",
          "$ref": "#/definitions/schema.RestoreDetailMetadata"
        },
        "spec": {
          "description": "restore Spec",
          "$ref": "#/definitions/schema.RestoreDetailSpec"
        },
        "status": {
          "description": "restore Status",
          "$ref": "#/definitions/schema.RestoreDetailStatus"
        }
      }
    },
    "schema.RestoreDetailMetadata": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "restore name",
          "type": "string"
        }
      }
    },
    "schema.RestoreDetailSpec": {
      "required": [
        "backupName"
      ],
      "properties": {
        "backupName": {
          "description": "restore from backup",
          "type": "string"
        }
      }
    },
    "schema.RestoreDetailStatus": {
      "required": [
        "phase",
        "startTimestamp",
        "completionTimestamp"
      ],
      "properties": {
        "completionTimestamp": {
          "description": "complete restore time",
          "type": "string"
        },
        "phase": {
          "description": "restore status",
          "type": "string"
        },
        "startTimestamp": {
          "description": "restore start time",
          "type": "string"
        }
      }
    },
    "schema.RestoreList": {
      "required": [
        "kind",
        "items"
      ],
      "properties": {
        "items": {
          "description": "restore detail list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.RestoreDetail"
          }
        },
        "kind": {
          "description": "RestoreList kind",
          "type": "string"
        }
      }
    },
    "schema.Role": {
      "required": [
        "name",
        "function"
      ],
      "properties": {
        "function": {
          "description": "function code represent capability of the role",
          "type": "integer",
          "format": "integer"
        },
        "id": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "schema.SSHRSAkey": {
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "public key",
          "type": "string"
        }
      }
    },
    "schema.SendDataObject": {
      "required": [
        "randomCode"
      ],
      "properties": {
        "randomCode": {
          "type": "string"
        }
      }
    },
    "schema.SendMesssageResp": {
      "required": [
        "code",
        "errorDescription",
        "dataObject"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "dataObject": {
          "$ref": "#/definitions/schema.SendDataObject"
        },
        "errorDescription": {
          "type": "string"
        }
      }
    },
    "schema.Storage": {
      "required": [
        "nfs",
        "ceph"
      ],
      "properties": {
        "ceph": {
          "description": "ceph section",
          "$ref": "#/definitions/ceph.Ceph"
        },
        "nfs": {
          "description": "nfs section",
          "$ref": "#/definitions/nfs.NFS"
        }
      }
    },
    "schema.SystemAuthType": {
      "required": [
        "standard",
        "caas"
      ],
      "properties": {
        "caas": {
          "description": "caas redirect auth",
          "type": "boolean"
        },
        "standard": {
          "description": "local auth",
          "type": "boolean"
        }
      }
    },
    "schema.SystemInfo": {
      "required": [
        "licenseValid",
        "systemVersion",
        "systemProduct",
        "license",
        "modules"
      ],
      "properties": {
        "company": {
          "description": "do not input auto generator, license company info",
          "type": "string"
        },
        "cpu": {
          "description": "do not input auto generator, license cpu limit info",
          "type": "string"
        },
        "end": {
          "description": "do not input auto generator, license expired date",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "do not input auto generator, license check failed root cause",
          "type": "string"
        },
        "license": {
          "description": "do not input auto generator, license string",
          "type": "string"
        },
        "licenseValid": {
          "description": "do not input auto generator, license is valid",
          "type": "boolean"
        },
        "mac_address": {
          "description": "do not input auto generator, license mac address info",
          "type": "string"
        },
        "modules": {
          "description": "do not input auto generator, such as-\u003e modules:web-console",
          "type": "string"
        },
        "node": {
          "description": "do not input auto generator, license node limit info",
          "type": "string"
        },
        "product": {
          "description": "do not input auto generator, license production info",
          "type": "string"
        },
        "systemProduct": {
          "description": "do not input auto generator, license system product info",
          "type": "string"
        },
        "systemVersion": {
          "description": "do not input auto generator, license system version info",
          "type": "string"
        },
        "version": {
          "description": "do not input auto generator, license version info",
          "type": "string"
        }
      }
    },
    "schema.UpgradableVersion": {
      "required": [
        "name",
        "version_state",
        "description",
        "created_by",
        "last_modified_by"
      ],
      "properties": {
        "centos": {
          "$ref": "#/definitions/schema.OSFamilyCentos"
        },
        "created_by": {
          "type": "string"
        },
        "date_created": {
          "type": "string"
        },
        "date_modified": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "last_modified_by": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ubuntu": {
          "$ref": "#/definitions/schema.OSFamilyUbuntu"
        },
        "version_state": {
          "type": "string"
        }
      }
    },
    "schema.UpgradeNodeCheckState": {
      "required": [
        "node_id",
        "os_family",
        "cpu_arch",
        "node_ipv_4",
        "package_check_result"
      ],
      "properties": {
        "cpu_arch": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "node_ipv_4": {
          "type": "string"
        },
        "os_family": {
          "type": "string"
        },
        "package_check_result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.PackageCheckState"
          }
        }
      }
    },
    "schema.UpgradePlan": {
      "required": [
        "id",
        "is_rmp_ready",
        "cluster_id",
        "rmp_check_status",
        "image_change_plan",
        "is_image_ready",
        "plan",
        "message_plan_result",
        "status",
        "target_version",
        "operation_id",
        "operations",
        "apply_date"
      ],
      "properties": {
        "apply_date": {
          "type": "string"
        },
        "cluster_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "image_change_plan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.ImageCheckState"
          }
        },
        "is_image_ready": {
          "type": "boolean"
        },
        "is_rmp_ready": {
          "type": "boolean"
        },
        "message_plan_result": {
          "type": "string"
        },
        "operation_id": {
          "type": "string"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "plan": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rmp_check_status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.UpgradeNodeCheckState"
          }
        },
        "status": {
          "type": "string"
        },
        "target_version": {
          "type": "string"
        }
      }
    },
    "schema.User": {
      "required": [
        "username",
        "password",
        "phone"
      ],
      "properties": {
        "aud": {
          "type": "string"
        },
        "exp": {
          "type": "integer",
          "format": "int64"
        },
        "iat": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "iss": {
          "type": "string"
        },
        "jti": {
          "type": "string"
        },
        "ks_account": {
          "description": "kubespere user account",
          "type": "string"
        },
        "nbf": {
          "type": "integer",
          "format": "int64"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "description": "user phone number",
          "type": "string"
        },
        "roles": {
          "description": "contain one or more roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.Role"
          }
        },
        "sub": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "schema.VKProviderAWS": {},
    "schema.VKProviderAliCloud": {},
    "schema.VKProviderAzure": {},
    "schema.VKProviderCaas": {
      "properties": {
        "caas_api_url": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "caas_cluster_id": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "caas_password": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "caas_username": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "cpu_limit": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "memory_limit": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "pod_limit": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        }
      }
    },
    "schema.VKProviderMock": {
      "properties": {
        "cpu_limit": {
          "type": "string"
        },
        "memory_limit": {
          "type": "string"
        },
        "pod_limit": {
          "type": "string"
        }
      }
    },
    "schema.ValidateDataObject": {
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "type": "boolean"
        }
      }
    },
    "schema.ValidateMesssageCode": {
      "required": [
        "username",
        "randomcode",
        "type",
        "phone"
      ],
      "properties": {
        "phone": {
          "type": "string"
        },
        "randomcode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "schema.ValidateMesssageResp": {
      "required": [
        "code",
        "errorDescription",
        "dataObject"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "dataObject": {
          "$ref": "#/definitions/schema.ValidateDataObject"
        },
        "errorDescription": {
          "type": "string"
        }
      }
    },
    "schema.VirtualKubelet": {
      "properties": {
        "provider": {
          "description": "Deprecated, will be remove in future",
          "type": "string"
        },
        "vk_provider_Caas": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.VKProviderCaas"
        },
        "vk_provider_ali_cloud": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.VKProviderAliCloud"
        },
        "vk_provider_aws": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.VKProviderAWS"
        },
        "vk_provider_azure": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.VKProviderAzure"
        },
        "vk_provider_mock": {
          "description": "Deprecated, will be remove in future",
          "$ref": "#/definitions/schema.VKProviderMock"
        }
      }
    },
    "struct { ClusterInstaller string \"json:\\\"cluster_installer\\\"\" }": {
      "required": [
        "cluster_installer"
      ],
      "properties": {
        "cluster_installer": {
          "type": "string"
        }
      }
    },
    "struct { Console int \"json:\\\"console\\\" description:\\\"Is console enabled 0=disable 1=enabled\\\"\"; MiddlePlatform int \"json:\\\"middle_platform\\\" description:\\\"Is middle platform enabled 0=disable 1=enabled\\\"\"; Pgo int \"json:\\\"pgo\\\" description:\\\"Is middle platform enabled 0=disable 1=enabled\\\"\" }": {
      "required": [
        "console",
        "middle_platform",
        "pgo"
      ],
      "properties": {
        "console": {
          "description": "Is console enabled 0=disable 1=enabled",
          "type": "integer",
          "format": "int32"
        },
        "middle_platform": {
          "description": "Is middle platform enabled 0=disable 1=enabled",
          "type": "integer",
          "format": "int32"
        },
        "pgo": {
          "description": "Is middle platform enabled 0=disable 1=enabled",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "struct { Description string \"json:\\\"description,omitempty\\\"\" }": {
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "struct { Domain string \"json:\\\"domain\\\" validate:\\\"required,fqdn\\\" description:\\\"domain name unique\\\"\"; Description string \"json:\\\"description,omitempty\\\"\" }": {
      "required": [
        "domain"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "domain": {
          "description": "domain name unique",
          "type": "string"
        }
      }
    },
    "struct { DomainResolve ||coredns.DNSDomainUpdateDocSchema \"json:\\\"domain_resolve\\\"  validate:\\\"required\\\" description:\\\"ip address list of this domain resolve to\\\"\"; Description string \"json:\\\"description,omitempty\\\"\" }": {
      "required": [
        "domain_resolve"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "domain_resolve": {
          "description": "ip address list of this domain resolve to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/coredns.DNSDomainUpdateDocSchema"
          }
        }
      }
    },
    "struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\"; Username string \"json:\\\"username,omitempty\\\"\"; Password string \"json:\\\"password,omitempty\\\"\"; Roles ||struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\" } \"json:\\\"roles,omitempty\\\" description:\\\"contain one or more roles\\\"\" }": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roles": {
          "description": "contain one or more roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/struct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22;%20Username%20string%20%22json:%5C%22username,omitempty%5C%22%22;%20Password%20string%20%22json:%5C%22password,omitempty%5C%22%22;%20Roles%20%7C%7Cstruct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22%20%7D%20%22json:%5C%22roles,omitempty%5C%22%20description:%5C%22contain%20one%20or%20more%20roles%5C%22%22%20%7D.roles"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\"; Username string \"json:\\\"username,omitempty\\\"\"; Password string \"json:\\\"password,omitempty\\\"\"; Roles ||struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\" } \"json:\\\"roles,omitempty\\\" description:\\\"contain one or more roles\\\"\" }.roles": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "do not input auto generator",
          "type": "string"
        }
      }
    },
    "struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\"; Username string \"json:\\\"username,omitempty\\\"\"; Password string \"json:\\\"password,omitempty\\\"\"; Roles ||struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\" } \"json:\\\"roles,omitempty\\\" description:\\\"contain one or more roles\\\"\"; Phone string \"json:\\\"phone,omitempty\\\" description:\\\"user phone number\\\"\"; KsAccount string \"json:\\\"ks_account,omitempty\\\" description:\\\"kubespere user account\\\"\" }": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "do not input auto generator",
          "type": "string"
        },
        "ks_account": {
          "description": "kubespere user account",
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "description": "user phone number",
          "type": "string"
        },
        "roles": {
          "description": "contain one or more roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/struct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22;%20Username%20string%20%22json:%5C%22username,omitempty%5C%22%22;%20Password%20string%20%22json:%5C%22password,omitempty%5C%22%22;%20Roles%20%7C%7Cstruct%20%7B%20Id%20string%20%22json:%5C%22id%5C%22%20description:%5C%22do%20not%20input%20auto%20generator%5C%22%22%20%7D%20%22json:%5C%22roles,omitempty%5C%22%20description:%5C%22contain%20one%20or%20more%20roles%5C%22%22;%20Phone%20string%20%22json:%5C%22phone,omitempty%5C%22%20description:%5C%22user%20phone%20number%5C%22%22;%20KsAccount%20string%20%22json:%5C%22ks_account,omitempty%5C%22%20description:%5C%22kubespere%20user%20account%5C%22%22%20%7D.roles"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\"; Username string \"json:\\\"username,omitempty\\\"\"; Password string \"json:\\\"password,omitempty\\\"\"; Roles ||struct { Id string \"json:\\\"id\\\" description:\\\"do not input auto generator\\\"\" } \"json:\\\"roles,omitempty\\\" description:\\\"contain one or more roles\\\"\"; Phone string \"json:\\\"phone,omitempty\\\" description:\\\"user phone number\\\"\"; KsAccount string \"json:\\\"ks_account,omitempty\\\" description:\\\"kubespere user account\\\"\" }.roles": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "do not input auto generator",
          "type": "string"
        }
      }
    },
    "struct { Name string \"json:\\\"name\\\" validate:\\\"required\\\"\"; Function uint64 \"json:\\\"function\\\" validate:\\\"required\\\" description:\\\"function code represent capability of the role\\\"\" }": {
      "required": [
        "name",
        "function"
      ],
      "properties": {
        "function": {
          "description": "function code represent capability of the role",
          "type": "integer",
          "format": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "struct { Status string \"json:\\\"status\\\"\" }": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "struct { Token string \"json:\\\"token\\\"\"; ExpiredDate string \"json:\\\"expired_date\\\"\"; Permission uint64 \"json:\\\"permission\\\"\"; User schema.User \"json:\\\"user\\\"\" }": {
      "required": [
        "token",
        "expired_date",
        "permission",
        "user"
      ],
      "properties": {
        "expired_date": {
          "type": "string"
        },
        "permission": {
          "type": "integer",
          "format": "integer"
        },
        "token": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/schema.User"
        }
      }
    },
    "struct { TotalPage int64 \"json:\\\"total_page\\\"\"; Nodes ||schema.NodeInformation \"json:\\\"nodes\\\"\" }": {
      "required": [
        "total_page",
        "nodes"
      ],
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.NodeInformation"
          }
        },
        "total_page": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "struct { Username string \"json:\\\"username\\\" validate:\\\"required\\\"\"; Password string \"json:\\\"password\\\" validate:\\\"required\\\"\"; Roles ||schema.Role \"json:\\\"roles,omitempty\\\" description:\\\"contain one or more roles\\\"\"; Phone string \"json:\\\"phone,omitempty\\\" description:\\\"user phone number\\\"\"; KsAccount string \"json:\\\"ks_account,omitempty\\\" description:\\\"kubespere user account\\\"\" }": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "ks_account": {
          "description": "kubespere user account",
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "description": "user phone number",
          "type": "string"
        },
        "roles": {
          "description": "contain one or more roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/schema.Role"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "struct { Username string \"json:\\\"username\\\"\"; Password string \"json:\\\"password\\\"\" }": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "sysinfo.BIOS": {
      "properties": {
        "date": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.Board": {
      "properties": {
        "assettag": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.CPU": {
      "properties": {
        "cache": {
          "type": "integer",
          "format": "integer"
        },
        "cores": {
          "type": "integer",
          "format": "integer"
        },
        "cpus": {
          "type": "integer",
          "format": "integer"
        },
        "model": {
          "type": "string"
        },
        "speed": {
          "type": "integer",
          "format": "integer"
        },
        "threads": {
          "type": "integer",
          "format": "integer"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "sysinfo.Chassis": {
      "properties": {
        "assettag": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "integer"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.Kernel": {
      "properties": {
        "architecture": {
          "type": "string"
        },
        "release": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.Memory": {
      "properties": {
        "size": {
          "type": "integer",
          "format": "integer"
        },
        "speed": {
          "type": "integer",
          "format": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "sysinfo.Meta": {
      "required": [
        "version",
        "timestamp"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.NetworkDevice": {
      "properties": {
        "driver": {
          "type": "string"
        },
        "macaddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "speed": {
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "sysinfo.Node": {
      "properties": {
        "hostname": {
          "type": "string"
        },
        "hypervisor": {
          "type": "string"
        },
        "machineid": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "sysinfo.OS": {
      "properties": {
        "architecture": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "release": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.Product": {
      "properties": {
        "name": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sysinfo.StorageDevice": {
      "properties": {
        "driver": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "integer"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "sysinfo.SysInfo": {
      "required": [
        "sysinfo",
        "node",
        "os",
        "kernel",
        "product",
        "board",
        "chassis",
        "bios",
        "cpu",
        "memory"
      ],
      "properties": {
        "bios": {
          "$ref": "#/definitions/sysinfo.BIOS"
        },
        "board": {
          "$ref": "#/definitions/sysinfo.Board"
        },
        "chassis": {
          "$ref": "#/definitions/sysinfo.Chassis"
        },
        "cpu": {
          "$ref": "#/definitions/sysinfo.CPU"
        },
        "kernel": {
          "$ref": "#/definitions/sysinfo.Kernel"
        },
        "memory": {
          "$ref": "#/definitions/sysinfo.Memory"
        },
        "network": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sysinfo.NetworkDevice"
          }
        },
        "node": {
          "$ref": "#/definitions/sysinfo.Node"
        },
        "os": {
          "$ref": "#/definitions/sysinfo.OS"
        },
        "product": {
          "$ref": "#/definitions/sysinfo.Product"
        },
        "storage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sysinfo.StorageDevice"
          }
        },
        "sysinfo": {
          "$ref": "#/definitions/sysinfo.Meta"
        }
      }
    },
    "velero.DeployVelero": {
      "required": [
        "Enable"
      ],
      "properties": {
        "Enable": {
          "type": "boolean"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}